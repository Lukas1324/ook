package de.uniwue.jpp.ook;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Optional;

public class MyShell implements Shell {
    private static Util util;
    private static InputStream inputS;
    private static OutputStream outputS;
    private static InputStream readInp;
    private static MyInterpreter interpreter;

    public static Shell create(Ook handle, InputStream input, OutputStream output, InputStream readInput) {
        if (readInput == null || output == null || input == null || handle == null){

            throw new NullPointerException();
        }
        Shell shell = new MyShell();
        inputS = input;
        outputS = output;
        util = handle.createUtil();
        readInp = readInput;
        //interpreter = handle.createInterpreter(input, output);
        return shell;
    }
    @Override
    public Optional<Instruction> parseLine(String line) {
        return util.getInstruction(line);
    }

    @Override
    public void prepareUpdate(Instruction instruction) {
        String reading = "Reading: ";
        String writing = "Writing: ";
        String nichtsundwiedernichts = instruction + "\n";
        if(instruction.equals(Instruction.Read)){
            try {
                outputS.write(reading.getBytes());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } else if (instruction.equals(Instruction.Write)) {
            try {
                outputS.write(writing.getBytes());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }else{
            try {
                outputS.write(nichtsundwiedernichts.getBytes());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    @Override
    public void completeUpdate(Instruction instruction) {
        String garnichts = "\n";
        if(instruction.equals(Instruction.Write)){
            try {
                outputS.write(garnichts.getBytes());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } else if (instruction.equals(Instruction.Read)) {
            ///Rufe das n√§chste Zeichen vom Datenstrom auf
            try {
                if(10 ==  inputS.read()){
                    outputS.write("Illegal Input: Insert only one character!\n".getBytes());
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    @Override
    public void run() {
        interpreter.read();

    }
}
